Article 5966 of alt.sys.pdp10:
Path: news3.best.com!news2.best.com!newsfeed.berkeley.edu!remarQ73!supernews.com!remarQ.com!logbridge.uoregon.edu!news.u.washington.edu!Tomobiki-Cho.CAC.Washington.EDU!mrc
From: Mark Crispin <mrc@CAC.Washington.EDU>
Newsgroups: alt.sys.pdp10
Subject: Re: Is it a 2060 or a 2065?
Date: Sun, 26 Sep 1999 22:54:02 -0700
Organization: Networks & Distributed Computing
Lines: 477
Message-ID: <Pine.NXT.4.20.9909262234110.3020-100000@Tomobiki-Cho.CAC.Washington.EDU>
References: <37EEBB5C.E40834BE@prescienttech.com>
NNTP-Posting-Host: tomobiki-cho.cac.washington.edu
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Trace: nntp1.u.washington.edu 938411646 28176 (None) 140.142.17.35
X-Complaints-To: help@cac.washington.edu
NNTP-Posting-User: rodriguez
To: "Carl R. Friend" <carl.friend@prescienttech.com>
In-Reply-To: <37EEBB5C.E40834BE@prescienttech.com>
Xref: news3.best.com alt.sys.pdp10:5966

On Sun, 26 Sep 1999, Carl R. Friend wrote:
>    There is some speculation, however, as to its true identity. The
> serial number tags bill the system as a 2060; however, another tag
> which bears the "call for service" bits, calls the system out as a
> 2065.

It probably is a 2065.  Most 2065s were 2060s that were upgraded.

A 2065 has an MCA25 instead of an MCA20.  This doubled the size of the
hardware page table (to 1024 words), makes the page table two-way
associative, and added the keep bit (bit first of section and map
pointers) to prevent certain pages from being flushed from the HPT during
context switching.

Bit 23 of the APRID word will tell you if you have the keep bit, and hence
an MCA25.

Here's a program that I wrote 14 years ago that reports the status of the
hardware and measures system performance using the KL performance meters:

	TITLE METER KL10 performance
	SUBTTL Mark Crispin 6/20/85

	SEARCH MACSYM,MONSYM
	.REQUIRE SYS:MACREL
	STDAC.
	SALL

;  This program was originally written to measure comparative results
; between the MCA20 and the MCA25, but it grew...
;
; Usage instructions:
; . Default test is cache miss.  To select any other test, deposit
;   instructions in locations TEST and TEST+1 to load the performance
;   meter enablings into T1.  Some tests have already been wired in -
;   see the last page for what's available.
; . Start the program.  You'll be asked for the sampling interval.  The
;   longer the interval, the better the results will be.
; . To get a summary and stop the program, type any character and it
;   will finish up after the current sampling interval is complete.

; Hardware definitions

APR==:000			; processor
TIM==:020			; timer

	OPDEF APRID [BLKI APR,]	; get processor ID
	OPDEF RDPERF [BLKI TIM,] ; Read Performance Analysis Count
	OPDEF RDTIME [DATAI TIM,] ; Read Time Base
	OPDEF WRPAE [BLKO TIM,]	; Write Performance Analysis Enables

; APRID bits

ID.T20==:1B0			; TOPS-20 paging
ID.EXT==:1B1			; extended addressing
ID.XUC==:1B2			; exotic microcode
ID.UCV==:777B17			; microcode version
ID.50H==:1B18			; 50 Hz
ID.CSH==:1B19			; cache
ID.CHN==:1B20			; channels
ID.KLB==:1B21			; KL-10 model B
ID.MOS==:1B22			; MOS master oscillator
ID.M25==:1B23			; MCA25 present
ID.SER==:7777B35		; processor serial number

REPEAT 1,<ID.M25==:ID.M25!1B5>	; kludge for version 5 microcode

; WRPAE enables

PA.CH0==:1B0			; RH20#0 busy
PA.CH1==:1B1			; RH20#1 busy
PA.CH2==:1B2			; RH20#2 busy
PA.CH3==:1B3			; RH20#3 busy
PA.CH4==:1B4			; RH20#4 busy
PA.CH5==:1B5			; RH20#5 busy
PA.CH6==:1B6			; RH20#6 busy
PA.CH7==:1B7			; RH20#7 busy
PA.CHI==:1B8			; ignore channel busy status
PA.UCI==:1B9			; ignore microcode enable
PA.PRL==:1B10			; select probe low (else high)
PA.PRI==:1B11			; ignore probe
PA.MCE==:1B12			; ignore EBOX wait
PA.MCM==:1B13			; ignore cache miss
PA.MCW==:1B14			; ignore cache write back
PA.MCS==:1B15			; ignore cache sweep write
PA.MCI==:1B16			; ignore memory conditions
;	 1B17			; MBZ
PA.PI0==:1B18			; PI level 0
PA.PI1==:1B19			; PI level 1
PA.PI2==:1B20			; PI level 2
PA.PI3==:1B21			; PI level 3
PA.PI4==:1B22			; PI level 4
PA.PI5==:1B23			; PI level 5
PA.PI6==:1B24			; PI level 6
PA.PI7==:1B25			; PI level 7
PA.PIN==:1B26			; no PI level
PA.PII==:PA.PI0!PA.PI1!PA.PI2!PA.PI3!PA.PI4!PA.PI5!PA.PI6!PA.PI7!PA.PIN
				; ignore PI level
PA.MDU==:1B27			; user mode (else exec)
PA.MDI==:1B28			; ignore mode
PA.SEM==:1B29			; select event method (else timer)
PA.CLR==:1B30			; clear counter
;	 1B31-1B35		; MBZ

; Data area

ENABLE:	BLOCK 1			; performance analysis enables
INTRVL:	BLOCK 1			; interval
BASE:	BLOCK 2			; base analysis count
TMBASE:	BLOCK 2			; time base
METER:	BLOCK 1			; meter in ms
TIME:	BLOCK 1			; elapsed time in ms
SMETER:	BLOCK 1			; sum of meter samples
STIME:	BLOCK 1			; sum of time samples

	PDLLEN==10
PDL:	BLOCK PDLLEN		; stack

MCA25:	RESET%			; reset everything
	MOVE P,[IOWD PDLLEN,PDL] ; load PDP
	SETZM SMETER		; clear totals
	SETZM STIME
	USRIO%			; get IOT privilege
	 JSHLT
	APRID T1		; get processor ID
	IFXE. T1,ID.T20		; good way to test if KS
	  HRROI T1,[ASCIZ/This program will not run on a 2020
/]
	  ESOUT%
	  JRSTF @[STOP]
	ENDIF.
	RDPERF T3		; read the meter
	MOVX T1,^D1000		; wait a bit
	DISMS%
	RDPERF T1		; sniff at it now
	CAMN T1,T3		; is it the same
	 CAME T2,T4
	IFNSK.
	  MOVX T1,.PRIIN	; clear input buffer
	  CFIBF%
	  TMSG <%Meter is already running...do you want to go on anyway?>
	  PBIN%
	  CAIN T1,.CHCRT	; if CR...
	   PBIN%		;  ...eat the LF
	  CAIE T1,"Y"		; get answer
	   CAIN T1,"y"
	    CAIA
	     JRSTF @[STOP]	; user didn't want it after all
	  TMSG <es
>
	ENDIF.
TEST:	MOVE T1,ENAMCM		; selec test
	NOP			; patch location
	MOVEM T1,ENABLE
	TMSG <Enter interval in seconds: >
	MOVX T1,.PRIIN
	MOVX T3,^D10
	NIN%
	 JSHLT
	IMULI T2,^D1000		; convert to ms
	MOVEM T2,INTRVL

; Output the hardware environment

	APRID T4		; get CPU ID
	TMSG <
KL-10 Processor serial number >
	MOVX T1,.PRIOU
	LOAD T2,ID.SER,T4	; get serial number
	MOVX T3,^D10
	NOUT%
	 JSHLT
	TMSG <
>
	IFXN. T4,ID.CSH		; have cache?
	  TXNN T4,ID.EXT
	   SKIPA T1,[-1,,[ASCIZ/2050/]]
	    HRROI T1,[ASCIZ/2060/]
	ELSE.
	  HRROI T1,[ASCIZ/2040/]
	ENDIF.
	PSOUT%
	TXNN T4,ID.KLB		; KL model B?
	 SKIPA T1,[-1,,[ASCIZ/  Model A/]]
	  HRROI T1,[ASCIZ/  Model B/]
	PSOUT%
	TXNE T4,ID.50H		; 50 or 60 Hz?
	 SKIPA T1,[-1,,[ASCIZ/  50 Hz/]]
	  HRROI T1,[ASCIZ/  60 Hz/]
	PSOUT%
	TMSG <
>
	HRROI T1,[ASCIZ/Exotic /]
	TXNE T4,ID.XUC		; exotic?
	 PSOUT%
	TMSG <Microcode version >
	MOVX T1,.PRIOU
	LOAD T2,ID.UCV,T4	; get ucode version
	MOVX T3,^D8
	NOUT%
	 JSHLT
	HRROI T1,[ASCIZ/
MCA25 pager extension/]
	TXNE T4,ID.M25		; have MCA25?
	 PSOUT%
	HRROI T1,[ASCIZ/
MOS master oscillator/]
	TXNE T4,ID.MOS		; have MOS?
	 PSOUT%
	HRROI T1,[ASCIZ/
Internal channels/]
	TXNE T4,ID.CHN		; have channels?
	 PSOUT%
	TMSG <

KL-10 Performance Analysis Enables:
>
	MOVE T2,ENABLE		; get command enables
	IFXE. T2,PA.CHI		; doing channels?
	  TMSG < Channels: >
	  HRROI T1,[ASCIZ/0 /]
	  TXNE T2,PA.CH0
	   PSOUT%
	  HRROI T1,[ASCIZ/1 /]
	  TXNE T2,PA.CH1
	   PSOUT%
	  HRROI T1,[ASCIZ/2 /]
	  TXNE T2,PA.CH2
	   PSOUT%
	  HRROI T1,[ASCIZ/3 /]
	  TXNE T2,PA.CH3
	   PSOUT%
	  HRROI T1,[ASCIZ/4 /]
	  TXNE T2,PA.CH4
	   PSOUT%
	  HRROI T1,[ASCIZ/5 /]
	  TXNE T2,PA.CH5
	   PSOUT%
	  HRROI T1,[ASCIZ/6 /]
	  TXNE T2,PA.CH6
	   PSOUT%
	  HRROI T1,[ASCIZ/7/]
	  TXNE T2,PA.CH7
	   PSOUT%
	  TMSG <
>
	ENDIF.
	HRROI T1,[ASCIZ/ Microcode condition
/]
	TXNN T2,PA.UCI
	 PSOUT%
	IFXE. T2,PA.PRI
	  TMSG < Probe >
	  HRROI T1,[ASCIZ/High
/]
	  TXNE T2,PA.PRL
	   HRROI T1,[ASCIZ/Low
/]
	  PSOUT
	ENDIF.
	IFXE. T2,PA.MCI
	  TMSG < Memory conditions: >
	  HRROI T1,[ASCIZ/EBOX wait  /]
	  TXNN T2,PA.MCE
	   PSOUT%
	  HRROI T1,[ASCIZ/cache miss  /]
	  TXNN T2,PA.MCM
	   PSOUT%
	  HRROI T1,[ASCIZ/cache write back  /]
	  TXNN T2,PA.MCW
	   PSOUT%
	  HRROI T1,[ASCIZ/cache sweep write/]
	  TXNN T2,PA.MCS
	   PSOUT%
	  TMSG <
>
	ENDIF.
	TXC T2,PA.PII
	TXCN T2,PA.PII
	IFSKP.
	  TMSG < PI levels: >
	  HRROI T1,[ASCIZ/0 /]
	  TXNE T2,PA.PI0
	   PSOUT%
	  HRROI T1,[ASCIZ/1 /]
	  TXNE T2,PA.PI1
	   PSOUT%
	  HRROI T1,[ASCIZ/2 /]
	  TXNE T2,PA.PI2
	   PSOUT%
	  HRROI T1,[ASCIZ/3 /]
	  TXNE T2,PA.PI3
	   PSOUT%
	  HRROI T1,[ASCIZ/4 /]
	  TXNE T2,PA.PI4
	   PSOUT%
	  HRROI T1,[ASCIZ/5 /]
	  TXNE T2,PA.PI5
	   PSOUT%
	  HRROI T1,[ASCIZ/6 /]
	  TXNE T2,PA.PI6
	   PSOUT%
	  HRROI T1,[ASCIZ/7 /]
	  TXNE T2,PA.PI7
	   PSOUT%
	  HRROI T1,[ASCIZ/non-PI/]
	  TXNE T2,PA.PIN
	   PSOUT%
	  TMSG <
>
	ENDIF.
	IFXE. T2,PA.MDI
	  HRROI T1,[ASCIZ/ Exec/]
	  TXNE T2,PA.MDU
	   HRROI T1,[ASCIZ/ User/]
	  PSOUT%
	  TMSG < mode only
>
	ENDIF.
	HRROI T1,[ASCIZ/ Duration method
/]
	TXNE T2,PA.SEM
	 HRROI T1,[ASCIZ/ Event method
/]
	PSOUT%
	TMSG <
>

; Collect the statistics

COLECT:	WRPAE [PA.CLR]		; clear counter, disable meter
	RDPERF BASE		; get meter base value
	RDTIME TMBASE		; get time base value
	WRPAE ENABLE		; get performance meter enables
	MOVE T1,INTRVL		; get interval
	DISMS%
	RDPERF T1		; take sample
	RDTIME T3		; take time
	DSUB T1,BASE		; delta sample
	IFQE. PA.SEM,ENABLE	; events?
	  DIV T1,BASDIV		; convert to ms*(sys clk rate/intvl timer rate)
	  IDIVI T1,^D15		; convert from sys clk rate to intvl timer rate
	ELSE.
	  DIVI T1,^D1000	; get thousands of events
	ENDIF.
	MOVEM T1,METER		; save metered value
	ADDM T1,SMETER		; update sum
	DSUB T3,TMBASE		; delta time
	DIV T3,BASDIV		; convert to ms
	MOVEM T3,TIME		; save time
	ADDM T3,STIME		; update sum
	WRPAE [PA.CLR]		; clear counter, disable meter

; Print the sample

	MOVX T1,.PRIOU		; output date/time
	SETO T2,		; time now
	SETZ T3,		; standard format
	ODTIM%
	TMSG < Elapsed time >
	MOVX T1,.PRIIN
	MOVE T2,TIME
	MOVX T3,^D10
	NOUT%
	 JSHLT
	TMSG < ms, meter >
	MOVX T1,.PRIIN
	MOVE T2,METER
	MOVX T3,^D10
	NOUT%
	 JSHLT
	IFQN. PA.SEM,ENABLE	; events?
	  TMSG <K>
	ENDIF.
	TMSG <
>
	MOVX T1,.PRIIN		; see if user typed anything
	SIBE%
	 JRSTF @[SUMMRY]	; he did, output summary
	JRST COLECT		; continue collecting samples

; Output summary

SUMMRY:	TMSG <Total time: >
	MOVX T1,.PRIOU
	MOVE T2,STIME		; output time sum
	IDIVI T2,^D1000
	MOVEI T4,(T3)		; save remainder
	MOVX T3,^D10
	NOUT%
	 JSHLT
	MOVX T2,"."		; output remainder
	BOUT%
	MOVEI T2,(T4)
	TXO T3,NO%LFL!NO%ZRO!<FLD 3,NO%COL>
	NOUT%
	 JSHLT
	TMSG < seconds, meter >
	MOVX T1,.PRIOU
	MOVE T2,SMETER		; get meter value
	IFQN. PA.SEM,ENABLE	; events?
	  MOVX T3,^D10
	  NOUT%
	   JSHLT
	  TMSG <K events, >
	  MOVX T1,.PRIOU
	  MOVE T2,SMETER	; get total meter value
	  IDIV T2,STIME		; divide time in ms
	  MOVX T3,^D10
	  NOUT%
	   JSHLT
	  TMSG <M/second average>
	ELSE.
	  IDIVI T2,^D1000	; no, convert ms to seconds
	  MOVEI T4,(T3)
	  MOVX T3,^D10
	  NOUT%
	   JSHLT
	  MOVX T2,"."
	  BOUT%
	  MOVEI T2,(T4)
	  TXO T3,NO%LFL!NO%ZRO!<FLD 3,NO%COL>
	  NOUT%
	   JSHLT
	  TMSG < seconds, >
	  MOVX T1,.PRIOU
	  MOVE T2,SMETER	; get total meter value
	  IMULI T2,^D100	; so we get percentage
	  IDIV T2,STIME		; divide by time
	  MOVEI T4,(T3)		; remember remainder
	  MOVX T3,^D10
	  NOUT%
	   JSHLT
	  MOVX T2,"."
	  BOUT%
	  MOVEI T2,(T4)		; get back remainder
	  IMULI T2,^D100	; scale up to time
	  IDIV T2,STIME
	  MOVX T3,NO%LFL!NO%ZRO!<FLD 2,NO%COL>!^D10
	  NOUT%
	   JSHLT
	  TMSG <% overall>
	ENDIF.
	TMSG <
>

STOP:	HALTF%			; all done
	JRST MCA25		; restart

; Other stuff

BASTMS==:^D1000			; ticks/ms of time base
BASUNT==:1B23			; units position time base clock 2nd word

BASDIV:	BASTMS*BASUNT		; time units to ms

	; meter always running (to compare with interval timer)
ENAALL:	PA.CHI!PA.UCI!PA.PRI!PA.MCI!PA.PII!PA.MDI
	; channel activity
ENACHN:	PA.CH0!PA.CH1!PA.CH2!PA.CH3!PA.CH4!PA.CH5!PA.CH6!PA.CH7!PA.UCI!PA.PRI!PA.MCI!PA.PII!PA.MDU
	; cache misses
ENAMCM:	PA.CHI!PA.UCI!PA.PRI!PA.MCE!PA.MCW!PA.MCS!PA.PII!PA.MDI
	; cache overhead
ENAMCA:	PA.CHI!PA.UCI!PA.PRI!PA.MCE!PA.PII!PA.MDI
	; PI in progress
ENAPIP:	PA.CHI!PA.UCI!PA.PRI!PA.MCI!PA.PI0!PA.PI1!PA.PI2!PA.PI3!PA.PI4!PA.PI5!PA.PI6!PA.PI7!PA.MDI
	; exec mode
ENAEXC:	PA.CHI!PA.UCI!PA.PRI!PA.MCI!PA.PII
	; user mode
ENAUSR:	PA.CHI!PA.UCI!PA.PRI!PA.MCI!PA.PII!PA.MDU

	XLIST			; literals
...LIT:	LIT
	LIST

	END MCA25



